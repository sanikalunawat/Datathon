# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XgTpkkOWS4lu-GaqO1kmo4v3_Im-HqyU
"""

!pip install pandas scikit-learn surprise

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Load dataset
df = pd.read_csv('Modified_Generated_dataset.csv')

# Preprocessing the 'Products' column to ensure all items are in a single string for each transaction
df['Products'] = df['Products'].str.lower()  # Convert to lowercase to standardize

# Vectorize product names using TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['Products'])

# Compute cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Function to recommend products for a given customer
def recommend_products(customer_id, top_n=5):
    # Find the row corresponding to the customer
    customer_index = df[df['Customer_ID'] == customer_id].index[0]

    # Get the similarity scores for this customer
    similarity_scores = list(enumerate(cosine_sim[customer_index]))

    # Sort by similarity score (descending) and get the indices of the most similar customers
    sorted_similarities = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

    # Exclude the customer itself (i.e., the first element in the list)
    similar_customers = sorted_similarities[1:]

    # Collect product recommendations from the most similar customers
    recommended_products = []
    for customer in similar_customers:
        # Get the index of the similar customer
        similar_customer_index = customer[0]

        # Get the products purchased by this similar customer
        similar_customer_products = df.iloc[similar_customer_index]['Products'].split(", ")

        # Add products to the recommendation list
        recommended_products.extend(similar_customer_products)

    # Filter the list to top_n unique recommendations
    recommended_products = list(set(recommended_products))
    print(recommended_products)
    return recommended_products[:top_n]

# Example: Get recommendations for customer 'CUST63353'
customer_id = 'CUST63353'
recommended_items = recommend_products(customer_id)
print(f"Recommended products for customer {customer_id}: {recommended_items}")

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Load dataset
df = pd.read_csv('Modified_Generated_dataset.csv')

# Preprocessing the 'Products' column to ensure all items are in a single string for each transaction
df['Products'] = df['Products'].str.lower()  # Convert to lowercase to standardize

# Vectorize product names using TF-IDF
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['Products'])

# Compute cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Function to recommend products for a given customer
def recommend_products(customer_id, top_n=5):
    # Find the row corresponding to the customer
    customer_index = df[df['Customer_ID'] == customer_id].index[0]

    # Get the similarity scores for this customer
    similarity_scores = list(enumerate(cosine_sim[customer_index]))

    # Sort by similarity score (descending) and get the indices of the most similar customers
    sorted_similarities = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

    # Exclude the customer itself (i.e., the first element in the list)
    similar_customers = sorted_similarities[1:]

    # Collect product recommendations from the most similar customers
    recommended_products = []
    for customer in similar_customers:
        # Get the index of the similar customer
        similar_customer_index = customer[0]

        # Get the products purchased by this similar customer
        similar_customer_products = df.iloc[similar_customer_index]['Products'].split(", ")

        # Add products to the recommendation list
        recommended_products.extend(similar_customer_products)

    # Filter the list to top_n unique recommendations
    recommended_products = list(set(recommended_products))
    print(recommended_products)
    return recommended_products[:top_n]

# Example: Get recommendations for customer 'CUST63353'
customer_id = 'CUST63353'
recommended_items = recommend_products(customer_id)
print(f"Recommended products for customer {customer_id}: {recommended_items}")


import pandas as pd

# Load the dataset
df = pd.read_csv('Generated_dataset.csv')

# Get the number of rows
num_rows = len(df)

# Split the dataframe into two halves
halfway = num_rows // 2

# Extract the first half and second half of the dataset
first_half = df.iloc[:halfway]
second_half = df.iloc[halfway:]

# Replace the second half of the users with the first half (with their City and Street info)
second_half[['Customer_ID', 'Customer_Name', 'City', 'Street']] = first_half[['Customer_ID', 'Customer_Name', 'City', 'Street']].values

# Combine the two halves back together
result_df = pd.concat([first_half, second_half], ignore_index=True)

# Save the modified dataset to a new CSV file
result_df.to_csv('Modified_Generated_dataset.csv', index=False)

print("Dataset has been modified and saved as 'Modified_Generated_dataset.csv'")


import pandas as pd
import ast
from collections import Counter

# Step 1: Load the dataset
data = pd.read_csv('r.csv')

# Step 2: Clean data (convert the 'Product' column from string to list)
data['Product'] = data['Product'].apply(ast.literal_eval)

# Step 3: Define a function to recommend products based on past purchases
def recommend_products(customer_name, data):
    # Get the customer's past purchases
    customer_data = data[data['Customer_Name'] == customer_name]

    # Collect all the products purchased by the customer
    all_products = []
    for products in customer_data['Product']:
        all_products.extend(products)

    # Find the most common products purchased by the customer
    product_counter = Counter(all_products)
    most_common_products = product_counter.most_common(3)  # Top 3 products

    # Get other customers who bought similar products
    recommendations = []
    for product, _ in most_common_products:
        similar_customers = data[data['Product'].apply(lambda x: product in x)]

        # Recommend products bought by similar customers that this customer has not bought yet
        for _, row in similar_customers.iterrows():
            for p in row['Product']:
                if p not in all_products and p not in recommendations:
                    recommendations.append(p)

    # Return the recommendations
    return recommendations[:5]  # Limit to top 5 recommendations

# Example usage:
# Personalized recommendation for a specific customer
customer_name = 'Lisa Graves'
personalized_recommendations = recommend_products(customer_name, data)
print(f"Personalized Recommendations for {customer_name}: {personalized_recommendations}"

import pandas as pd
import ast
from collections import Counter

# Step 1: Load the dataset
data = pd.read_csv('r.csv')

# Step 2: Clean data (convert the 'Product' column from string to list)
data['Product'] = data['Product'].apply(ast.literal_eval)

# Step 3: Define a function to recommend products based on past purchases
def recommend_products(customer_name, data):
    # Get the customer's past purchases
    customer_data = data[data['Customer_Name'] == customer_name]

    # Collect all the products purchased by the customer
    all_products = []
    for products in customer_data['Product']:
        all_products.extend(products)

    # Find the most common products purchased by the customer
    product_counter = Counter(all_products)
    most_common_products = product_counter.most_common(3)  # Top 3 products

    # Get other customers who bought similar products
    recommendations = []
    for product, _ in most_common_products:
        similar_customers = data[data['Product'].apply(lambda x: product in x)]

        # Recommend products bought by similar customers that this customer has not bought yet
        for _, row in similar_customers.iterrows():
            for p in row['Product']:
                if p not in all_products and p not in recommendations:
                    recommendations.append(p)

    # Return the recommendations
    return recommendations[:5]  # Limit to top 5 recommendations

# Example usage:
# Personalized recommendation for a specific customer
customer_name = 'Lisa Graves'
personalized_recommendations = recommend_products(customer_name, data)
print(f"Personalized Recommendations for {customer_name}: {personalized_recommendations}")